- name: "gem environment of {{ ruby_system_gems_executable }}"
  command: "{{ ruby_system_gems_executable }} environment"
  register: result

- name: gem environment result parse
  set_fact:
    result_stdout: "{{ result.stdout | from_yaml }}"

# if you build a ruby ​​from source code, the directory where the ruby
# executable binary and scripts are installed may not be included in
# the PATH of the root user.  therefore this ansible role uses the
# absolute path of gem command.
- name: executable directory
  set_fact:
    executable_directory: >-
      {{
         result_stdout["RubyGems Environment"]         |
         selectattr("EXECUTABLE DIRECTORY", "defined") |
         map(attribute="EXECUTABLE DIRECTORY")         |
         first
      }}

- name: show executable directory
  debug: var=executable_directory

- name: "system gems {{ ruby_system_gems_state }}"
  become: yes
  gem:
    name: "{{ item }}"
    state: "{{ ruby_system_gems_state }}"
    user_install: no
    include_doc: "{{ ruby_system_gems_include_doc }}"
    executable: "{{ executable_directory }}/{{ ruby_system_gems_executable }}"
  with_items:
    - "{{ ruby_system_gems_install_list }}"

- name: update rubygems
  block:
    - name: rubygems-update
      become: yes
      gem:
        name: rubygems-update
        state: "{{ ruby_system_gems_state }}"
        user_install: no
        include_doc: "{{ ruby_system_gems_include_doc }}"
        executable: "{{ executable_directory }}/{{ ruby_system_gems_executable }}"

    - name: update rubygems
      become: yes
      command: "{{ executable_directory }}/update_rubygems"

    - name: update system gems
      become: yes
      command: "{{ executable_directory }}/{{ ruby_system_gems_executable }} update --no-user-install"
  when: ruby_system_gems_update and (ruby_system_gems_state != "absent")

# Local Variables:
# indent-tabs-mode: nil
# End:
